DROP TABLE IF EXISTS notifications;
DROP TABLE IF EXISTS reports;
DROP TABLE IF EXISTS user_feedbacks;
DROP TABLE IF EXISTS messages;
DROP TABLE IF EXISTS discussions;
DROP TABLE IF EXISTS cart_items;
DROP TABLE IF EXISTS order_items;
DROP TABLE IF EXISTS orders;
DROP TABLE IF EXISTS bookmarks;
DROP TABLE IF EXISTS user_comments;
DROP TABLE IF EXISTS user_likes;
DROP TABLE IF EXISTS item_tags;
DROP TABLE IF EXISTS tags;
DROP TABLE IF EXISTS wishlist;
DROP TABLE IF EXISTS items;
DROP TABLE IF EXISTS collections;
DROP TABLE IF EXISTS user_preferred_categories;
DROP TABLE IF EXISTS user_contacts;
DROP TABLE IF EXISTS shipping_addresses;
DROP TABLE IF EXISTS user_authorities;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS categories;

-- DROP SCHEMA IF EXISTS collection_archive CASCADE;
-- CREATE SCHEMA collection_archive;


CREATE TABLE categories (
    category_id INT GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    category_name VARCHAR NOT NULL,
	photo VARCHAR(500),
	description VARCHAR(500),
    CONSTRAINT "PK_category_id" PRIMARY KEY (category_id)
);

ALTER TABLE IF EXISTS categories
    OWNER to "postgresMaster";

CREATE TABLE users (
    user_id INT GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    name VARCHAR(50) NOT NULL,
    lastname VARCHAR(50) NOT NULL,
    password VARCHAR(500) NOT NULL,
    email VARCHAR(50) NOT NULL UNIQUE,
    country VARCHAR(50),

    active BOOLEAN NOT NULL DEFAULT TRUE,

    CONSTRAINT "PK_user_id" PRIMARY KEY (user_id)
);

ALTER TABLE IF EXISTS users
    OWNER to "postgresMaster";

CREATE TABLE IF NOT EXISTS user_authorities
(
    user_id integer NOT NULL,
    authority character varying,
    CONSTRAINT user_authorities_pkey PRIMARY KEY (user_id, authority),
    CONSTRAINT user_authorities_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES users (user_id)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

ALTER TABLE IF EXISTS user_authorities
    OWNER to "postgresMaster";

CREATE TABLE shipping_addresses (
    shipping_id INT GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    user_id INT NOT NULL,
    address VARCHAR(255) NOT NULL,
    city VARCHAR(50) NOT NULL,
    country VARCHAR(50) NOT NULL,
    postalcode VARCHAR(255) NOT NULL,

    CONSTRAINT "PK_shipping_id" PRIMARY KEY (shipping_id),
    CONSTRAINT FK_shipping_user_id FOREIGN KEY (user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE user_contacts (
    contact_id INT GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    user_id INT NOT NULL,
    phone VARCHAR(50) NOT NULL,
    
    CONSTRAINT "PK_contact_id" PRIMARY KEY (contact_id),
    CONSTRAINT FK_contact_user_id FOREIGN KEY (user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE user_preferred_categories (
    preference_id INT GENERATED BY DEFAULT AS IDENTITY,
    user_id INTEGER NOT NULL,
    category_id INTEGER NOT NULL,

    CONSTRAINT "PK_preference_id" PRIMARY KEY (preference_id),
   
    CONSTRAINT FK_upc_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT FK_upc_category FOREIGN KEY (category_id) REFERENCES categories(category_id) ON UPDATE CASCADE
);

CREATE TABLE collections (
    collection_id INT GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    collection_name VARCHAR(255) NOT NULL,
    completed BOOLEAN NOT NULL,
    category_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    visibility VARCHAR(50) NOT NULL DEFAULT 'visible',
    description VARCHAR(500),
    collection_date DATE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    for_sale BOOLEAN NOT NULL DEFAULT FALSE,
    sale_price DOUBLE PRECISION,
    visibility_status VARCHAR(50) NOT NULL DEFAULT 'visible',
	
    CONSTRAINT "PK_collection_id" PRIMARY KEY (collection_id),

    CONSTRAINT FK_collection_category FOREIGN KEY (category_id) REFERENCES categories(category_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CONSTRAINT FK_collection_user FOREIGN KEY (user_id) REFERENCES users(user_id),
    CONSTRAINT "CHK_sale_price" CHECK (sale_price IS NULL OR sale_price > 0),
	CONSTRAINT "CHK_visibility_status" CHECK (visibility_status IN ('visible', 'sold', 'deleted', 'archived'))
);

CREATE TABLE items (
    item_id INT GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    collection_id INT,
    user_id INTEGER NOT NULL,
    item_name VARCHAR(255) NOT NULL,
    item_description VARCHAR(500),
    item_photo VARCHAR(1000),
    condition VARCHAR (50),
    purchase_date DATE,
    release_date DATE,
    purchase_price DOUBLE PRECISION,
    sale_price DOUBLE PRECISION,
    item_version VARCHAR(100),
    item_edition VARCHAR(100),
    for_sale BOOLEAN NOT NULL DEFAULT FALSE,
    visibility_status VARCHAR(50) NOT NULL DEFAULT 'visible',

    CONSTRAINT "PK_item_id" PRIMARY KEY (item_id),

    CONSTRAINT FK_item_collection FOREIGN KEY (collection_id) REFERENCES collections(collection_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT FK_item_user FOREIGN KEY (user_id) REFERENCES users(user_id),
    CONSTRAINT "CHK_purchase_price" CHECK (purchase_price IS NULL OR purchase_price > 0),
    CONSTRAINT "CHK_sale_price" CHECK (sale_price IS NULL OR sale_price > 0) NOT VALID,
	CONSTRAINT "CHK_visibility_status" CHECK (visibility_status IN ('visible', 'sold', 'deleted', 'archived'))
);

CREATE TABLE wishlist (
    desired_item_id INT GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    collection_id INT NOT NULL,
    item_name VARCHAR(255) NOT NULL,
    item_description VARCHAR(500),
    item_photo VARCHAR(255),
    release_date DATE NULL,
    item_version VARCHAR(100),
    item_edition VARCHAR(100),

    CONSTRAINT "PK_desired_item_id" PRIMARY KEY (desired_item_id),

    CONSTRAINT FK_desired_item_collection FOREIGN KEY (collection_id) REFERENCES collections(collection_id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE tags (
    tag_id INTEGER GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    tag_name VARCHAR(255) NOT NULL,
    
    CONSTRAINT "PK_tag_id" PRIMARY KEY (tag_id)
);

CREATE TABLE item_tags (
    item_tag_id INTEGER GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    item_id INTEGER NOT NULL,
    tag_id INTEGER NOT NULL,
    
    CONSTRAINT "PK_item_tag_id" PRIMARY KEY (item_tag_id),

    CONSTRAINT FK_obj_tags_item_id FOREIGN KEY (item_id) REFERENCES items(item_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT FK_obj_tags_tag_id FOREIGN KEY (tag_id) REFERENCES tags(tag_id) ON UPDATE CASCADE ON DELETE NO ACTION
);

CREATE TABLE user_likes (
    like_id INTEGER GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    user_id INTEGER NOT NULL,
    item_id INTEGER,
    collection_id INTEGER,
    
    CONSTRAINT "PK_like_id" PRIMARY KEY (like_id),

    CONSTRAINT FK_likes_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT FK_likes_item FOREIGN KEY (item_id) REFERENCES items(item_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT FK_likes_collection FOREIGN KEY (collection_id) REFERENCES collections(collection_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CHECK (
        (item_id IS NOT NULL AND collection_id IS NULL) OR
        (collection_id IS NOT NULL AND item_id IS NULL)
    )
);

CREATE TABLE user_comments (
    comment_id INT GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),  
    user_id INTEGER NULL,     
    item_id INTEGER,
    collection_id INTEGER,         
    comment VARCHAR(1000) NOT NULL,

    CONSTRAINT "PK_comment_id" PRIMARY KEY (comment_id), 
     
    CONSTRAINT FK_comment_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CONSTRAINT FK_comment_item FOREIGN KEY (item_id) REFERENCES items(item_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT FK_comment_collection FOREIGN KEY (collection_id) REFERENCES collections(collection_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CHECK (
        (item_id IS NOT NULL AND collection_id IS NULL) OR
        (collection_id IS NOT NULL AND item_id IS NULL)
    )
);

CREATE TABLE bookmarks (
    bookmark_id INT GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),  
    user_id INTEGER NULL,     
    item_id INTEGER,
    collection_id INTEGER,         
    saved_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "PK_bookmark_id" PRIMARY KEY (bookmark_id), 
     
    CONSTRAINT FK_bookmark_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT FK_bookmark_item FOREIGN KEY (item_id) REFERENCES items(item_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT FK_bookmark_collection FOREIGN KEY (collection_id) REFERENCES collections(collection_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CHECK (
        (item_id IS NOT NULL AND collection_id IS NULL) OR
        (collection_id IS NOT NULL AND item_id IS NULL)
    )
);

CREATE TABLE orders (
    order_id INTEGER GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    buyer_id INTEGER NOT NULL,
    ordered_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	shipping_id INTEGER NOT NULL,

    CONSTRAINT "PK_order_id" PRIMARY KEY (order_id),

    CONSTRAINT FK_orders_buyer FOREIGN KEY (buyer_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE NO ACTION,
);

CREATE TABLE order_items (
    order_item_id INTEGER GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),     
    order_id INTEGER NOT NULL, 
	seller_id INTEGER NOT NULL,
    item_id INTEGER,
    collection_id INTEGER,               
    price DOUBLE PRECISION NOT NULL,   
	status VARCHAR(250) DEFAULT 'pending',

    CONSTRAINT "PK_order_item_id" PRIMARY KEY (order_item_id),                 
    
    CONSTRAINT FK_order_items_order FOREIGN KEY (order_id) REFERENCES orders(order_id) ON UPDATE CASCADE ON DELETE NO ACTION,
	CONSTRAINT FK_orders_seller FOREIGN KEY (seller_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CONSTRAINT FK_order_item_item FOREIGN KEY (item_id) REFERENCES items(item_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CONSTRAINT FK_order_item_collection FOREIGN KEY (collection_id) REFERENCES collections(collection_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CHECK (
        (item_id IS NOT NULL AND collection_id IS NULL) OR
        (collection_id IS NOT NULL AND item_id IS NULL)
    ),
	CONSTRAINT "CHK_status" CHECK (status IN ('pending', 'accepted', 'rejected'))
);

CREATE TABLE cart_items (
    cart_item_id INT GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),          
    buyer_id INT NOT NULL,                 
    seller_id INT NOT NULL, 
    item_id INTEGER,
    collection_id INTEGER, 
    expires_at TIMESTAMP DEFAULT (CURRENT_TIMESTAMP + INTERVAL '2 hours'),

    CONSTRAINT "PK_cart_item_id" PRIMARY KEY (cart_item_id),    
     
    CONSTRAINT FK_cart_item_buyer FOREIGN KEY (buyer_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CONSTRAINT FK_cart_item_seller FOREIGN KEY (seller_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CONSTRAINT FK_cart_item_item FOREIGN KEY (item_id) REFERENCES items(item_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CONSTRAINT FK_cart_item_collection FOREIGN KEY (collection_id) REFERENCES collections(collection_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CHECK (
        (item_id IS NOT NULL AND collection_id IS NULL) OR
        (collection_id IS NOT NULL AND item_id IS NULL)
    )
);

CREATE TABLE discussions (
    discussion_id INTEGER GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),          
    buyer_id INT NOT NULL,                 
    seller_id INT NOT NULL, 
    item_id INTEGER,
    collection_id INTEGER, 

    CONSTRAINT "PK_discussion_id" PRIMARY KEY (discussion_id),    
     
    CONSTRAINT FK_discussions_buyer FOREIGN KEY (buyer_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CONSTRAINT FK_discussions_seller FOREIGN KEY (seller_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CONSTRAINT FK_discussions_item FOREIGN KEY (item_id) REFERENCES items(item_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CONSTRAINT FK_discussions_collection FOREIGN KEY (collection_id) REFERENCES collections(collection_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CHECK (
        (item_id IS NOT NULL AND collection_id IS NULL) OR
        (collection_id IS NOT NULL AND item_id IS NULL)
    )
);

CREATE TABLE messages (
    message_id INTEGER GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),          
    discussion_id INTEGER NOT NULL,      
    content VARCHAR(1000) NOT NULL,      
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  
	sender_id INT NOT NULL,                 
    receiver_id INT NOT NULL, 

    CONSTRAINT "PK_message_id" PRIMARY KEY (message_id), 

    CONSTRAINT FK_messages_discussion FOREIGN KEY (discussion_id) REFERENCES discussions(discussion_id) ON UPDATE CASCADE ON DELETE NO ACTION,
	CONSTRAINT FK_discussions_sender FOREIGN KEY (sender_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CONSTRAINT FK_discussions_receiver FOREIGN KEY (receiver_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE NO ACTION
);

CREATE TABLE user_feedbacks (
    feedback_id INT GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),  
    order_id INT NOT NULL,     
    from_user_id INTEGER,                 
    to_user_id INT NOT NULL, 
    rating INT NOT NULL,
    comment VARCHAR(1000),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "PK_feedback_id" PRIMARY KEY (feedback_id),    
     
    CONSTRAINT FK_feedbacks_order FOREIGN KEY (order_id) REFERENCES orders(order_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT FK_feedbacks_from_user FOREIGN KEY (from_user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE SET NULL,
    CONSTRAINT FK_feedbacks_to_user FOREIGN KEY (to_user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT "CHK_rating_range" CHECK (rating BETWEEN 1 AND 5) NOT VALID
);

CREATE TABLE reports (
    report_id INT GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),  
    reporter_id INT NOT NULL,        
    reported_user_id INT, 
    item_id INTEGER,
    collection_id INTEGER,
    comment_id INTEGER,
    message_id INTEGER,                
    content VARCHAR(1000),
    status VARCHAR(50) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "PK_report_id" PRIMARY KEY (report_id),    
     
    CONSTRAINT FK_reports_reporter_id FOREIGN KEY (reporter_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE SET NULL,
    CONSTRAINT FK_reports_reported_user_id FOREIGN KEY (reported_user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT FK_reports_item FOREIGN KEY (item_id) REFERENCES items(item_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CONSTRAINT FK_reports_collection FOREIGN KEY (collection_id) REFERENCES collections(collection_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CONSTRAINT FK_reports_comment FOREIGN KEY (comment_id) REFERENCES user_comments(comment_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CONSTRAINT FK_reports_message FOREIGN KEY (message_id) REFERENCES messages(message_id) ON UPDATE CASCADE ON DELETE NO ACTION,
	CONSTRAINT "CHK_status" CHECK (status IN ('pending', 'resolved')),
    CHECK (
        (item_id IS NOT NULL AND collection_id IS NULL AND message_id IS NULL AND comment_id IS NULL) OR
        (collection_id IS NOT NULL AND item_id IS NULL AND message_id IS NULL AND comment_id IS NULL) OR
        (message_id IS NOT NULL AND collection_id IS NULL AND item_id IS NULL AND comment_id IS NULL) OR
        (comment_id IS NOT NULL AND collection_id IS NULL AND message_id IS NULL AND item_id IS NULL)
    )
);

CREATE TABLE notifications (
    notification_id INTEGER GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 ),
    user_id INTEGER NOT NULL,
    from_user_id INT,
    order_id INTEGER,
    like_id INTEGER,
    comment_id INTEGER,
    message_id INTEGER,
    feedback_id INTEGER,
    content VARCHAR,
    read BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT "PK_notification_id" PRIMARY KEY (notification_id),

    CONSTRAINT FK_notifications_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT FK_notifications_from_user FOREIGN KEY (from_user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE SET NULL,
    CONSTRAINT FK_notifications_order FOREIGN KEY (order_id) REFERENCES orders(order_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CONSTRAINT FK_notifications_like FOREIGN KEY (like_id) REFERENCES user_likes(like_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CONSTRAINT FK_notifications_comment FOREIGN KEY (comment_id) REFERENCES user_comments(comment_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CONSTRAINT FK_notifications_message FOREIGN KEY (message_id) REFERENCES messages(message_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CONSTRAINT FK_notifications_feedback FOREIGN KEY (feedback_id) REFERENCES user_feedbacks(feedback_id) ON UPDATE CASCADE ON DELETE NO ACTION,
    CHECK (
        (order_id IS NOT NULL AND like_id IS NULL AND message_id IS NULL AND comment_id IS NULL AND feedback_id IS NULL) OR
        (like_id IS NOT NULL AND order_id IS NULL AND message_id IS NULL AND comment_id IS NULL AND feedback_id IS NULL) OR
        (message_id IS NOT NULL AND like_id IS NULL AND order_id IS NULL AND comment_id IS NULL AND feedback_id IS NULL) OR
        (comment_id IS NOT NULL AND like_id IS NULL AND message_id IS NULL AND order_id IS NULL AND feedback_id IS NULL) OR
        (feedback_id IS NOT NULL AND like_id IS NULL AND message_id IS NULL AND comment_id IS NULL AND order_id IS NULL)
    )
    
);

-- CHECK (
--   (item_id IS NOT NULL AND collection_id IS NULL) OR
--   (collection_id IS NOT NULL AND item_id IS NULL)
-- )


